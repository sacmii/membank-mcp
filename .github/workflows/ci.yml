name: CI & Publish

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9.4.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23.6.1'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Check formatting
        run: pnpm run format:check

      - name: Build project
        run: pnpm run build

      - name: Test installation
        run: |
          timeout 5s node dist/index.js || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: |
            dist/
            package.json
            pnpm-lock.yaml

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      id-token: write
    steps:
      # CORRECTED ORDER: Download artifacts FIRST
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: .

      # Now, setup can use the downloaded pnpm-lock.yaml for caching
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9.4.0'
      - name: Setup Node.js and connect to NPM
        uses: actions/setup-node@v4
        with:
          node-version: '23.6.1'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Check if version is new
        id: version-check
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          PUBLISHED_VERSION=$(pnpm view "$PACKAGE_NAME" version 2>/dev/null || echo "0.0.0")

          if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Version changed: $PUBLISHED_VERSION -> $CURRENT_VERSION. Proceeding to publish."
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
            echo "‚ùå Version $CURRENT_VERSION is already published. Skipping."
          fi
      - name: Publish to NPM
        if: steps.version-check.outputs.should_publish == 'true'
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Create GitHub Release
        if: steps.version-check.outputs.should_publish == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version-check.outputs.current_version }}
          release_name: Release v${{ steps.version-check.outputs.current_version }}
          body: |
            ## üöÄ Released v${{ steps.version-check.outputs.current_version }}

            See the commit history for changes.
